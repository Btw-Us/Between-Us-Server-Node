version: '3.8'

services:
  app:
    build: .
    env_file:
      - .env
    ports:
      - '${PORT}:${PORT}'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev
    environment:
      - NODE_ENV=development
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
      mongo-setup:
        condition: service_completed_successfully
    networks:
      - app-network

  mongo1:
    image: mongo:7.0
    container_name: mongo_1
    restart: unless-stopped
    ports:
      - "${MONGO1_PORT:-27017}:27017"
    command: mongod --replSet ${MONGO_REPLICA_SET:-myReplicaSet} --bind_ip_all
    volumes:
      - mongodb_data:/data/db
      - ./init-scripts/mongo:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      timeout: 20s
      retries: 10
    networks:
      - app-network

  mongo2:
    image: mongo:7.0
    container_name: mongo_2
    restart: unless-stopped
    ports:
      - "${MONGO2_PORT:-27018}:27017"
    command: mongod --replSet ${MONGO_REPLICA_SET:-myReplicaSet} --bind_ip_all
    volumes:
      - mongo2_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      timeout: 20s
      retries: 10

  mongo3:
    image: mongo:7.0
    container_name: mongo_3
    restart: unless-stopped
    ports:
      - "${MONGO3_PORT:-27019}:27017"
    command: mongod --replSet ${MONGO_REPLICA_SET:-myReplicaSet} --bind_ip_all
    volumes:
      - mongo3_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      timeout: 20s
      retries: 10

  # Mongo Express for MongoDB management
  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express
    restart: unless-stopped
    ports:
      - "${MONGO_EXPRESS_PORT:-8082}:8081"
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=${MONGO_REPLICA_SET:-myReplicaSet}&authSource=admin
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-Admin@123}
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    depends_on:
      mongo1:
        condition: service_healthy
      mongo-setup:
        condition: service_completed_successfully
    networks:
      - app-network

  mongo-setup:
    image: mongo:7.0
    container_name: mongo_setup
    restart: "no"
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    environment:
      - MONGO_REPLICA_SET=${MONGO_REPLICA_SET:-myReplicaSet}
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - ./scripts:/scripts
    command: /scripts/init-replica-set.sh
    networks:
      - app-network

volumes:
  mongodb_data:
  mongo2_data:
  mongo3_data:

networks:
  app-network:
    driver: bridge